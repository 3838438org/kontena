#!/usr/bin/env ruby
# encoding: UTF-8

# resolve bin path, ignoring symlinks
require 'pathname'
bin_file = Pathname.new(__FILE__).realpath

# add self to libpath
$:.unshift File.expand_path('../../lib', bin_file)

STDOUT.sync = true

require 'clamp'
require 'ruby_dig'
require 'kontena'

class MainCommand < Clamp::Command
  subcommand "account", "Account specific commands", Kontena::Cli::AccountCommand
  subcommand "grid", "Grid specific commands", Kontena::Cli::GridCommand
  subcommand "app", "App specific commands", Kontena::Cli::AppCommand
  subcommand "service", "Service specific commands", Kontena::Cli::ServiceCommand
  subcommand "vault", "Vault specific commands", Kontena::Cli::VaultCommand
  subcommand "node", "Node specific commands", Kontena::Cli::NodeCommand
  subcommand "master", "Master specific commands", Kontena::Cli::MasterCommand
  subcommand "vpn", "VPN specific commands", Kontena::Cli::VpnCommand
  subcommand "registry", "Registry specific commands", Kontena::Cli::RegistryCommand
  subcommand "container", "Container specific commands", Kontena::Cli::ContainerCommand
  subcommand "etcd", "Etcd specific commands", Kontena::Cli::EtcdCommand
  subcommand "external-registry", "External registry specific commands", Kontena::Cli::ExternalRegistryCommand
  subcommand "whoami", "Shows current logged in user", Kontena::Cli::WhoamiCommand
  subcommand "version", "Show version", Kontena::Cli::VersionCommand
  subcommand "user", "User related commands", Kontena::Cli::UserCommand
  #subcommand "register", "Register Kontena Account", Kontena::Cli::RegisterCommand
  #subcommand "login", "Login to Kontena Master", Kontena::Cli::LoginCommand
  #subcommand "logout", "Logout from Kontena Master", Kontena::Cli::LogoutCommand
  
  def execute
  end
end

begin
  MainCommand.run
rescue Excon::Errors::SocketError => exc
  if exc.message.include?('Unable to verify certificate')
    $stderr.puts "The server uses a certificate signed by an unknown authority.".colorize(:red)
    $stderr.puts "You can trust this server by copying server CA pem file to: #{"~/.kontena/certs/<hostname>.pem".colorize(:light_black)}"
    $stderr.puts "Protip: you can bypass the certificate check by setting #{'SSL_IGNORE_ERRORS=true'.colorize(:yellow)} env variable, but any data you send to the server could be intercepted by others."
    exit(1)
  else
    abort(exc.message)
  end
rescue Kontena::Errors::StandardError => exc
  raise exc if ENV['DEBUG']
  abort(exc.message)
rescue => exc
  raise exc if ENV['DEBUG']
  $stderr.puts "Kontena error: #{exc.message}"
  $stderr.puts "Rerun the command with environment DEBUG=true set to get the full exception"
  abort
end
